/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/PQtgGPYs6Nt
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

'use client';
import { ChangeEvent, FormEvent, useState } from 'react';
import { IconProps } from '@radix-ui/react-icons/dist/types';
import Button from './Button';
import Image from 'next/image';
import { getUploadPreSignedUrl, uploadFileToUrl, uploadMetadata } from '@/server/functions/upload';
import { useAuth } from '@clerk/nextjs';

const MAX_SIZE_MB = 5;

export function Upload() {
  const [file, setFile] = useState<File | undefined>();
  const [uploading, setUploading] = useState<boolean>(false);
  const [message, setMessage] = useState<string>('');
  const [preview, setPreview] = useState<string | null>(null);
  const { userId } = useAuth();

  const handleFileChange = async (event: ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files.length > 0) {
      const uploadedFile = event.target.files?.[0];
      setFile(uploadedFile);
      const reader = new FileReader();

      reader.onloadend = () => {
        setPreview(reader.result as string);
      };
      reader.readAsDataURL(uploadedFile);
    }
    setMessage('');
  };

  const handlePreSignedUrlSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    if (!file) {
      setMessage('Please select a file');
      return;
    }

    // only images are allowed
    if (!file.type.startsWith('image/')) {
      setMessage('Only image files are allowed.');
      return;
    }

    // only 5mb limit upload allowed
    if (file.size > MAX_SIZE_MB * 1024 * 1024) {
      setMessage(`File too large. Max size is ${MAX_SIZE_MB}MB.`);
      return;
    }

    setUploading(true);
    setMessage('Uploading...');

    try {
      // Step 1 Fetch the upload Pre-Signed URL
      const url = await getUploadPreSignedUrl(file.name, file.size, file.type);

      if (!url) {
        setMessage('Pre-Sign URL error');
        return;
      }

      // Step 2 Upload the file to the bucket using the Pre-Signed URL
      const success = await uploadFileToUrl(url, file);

      //path to the file in the bucket
      const storagePath = `${userId}/${file.name}`;

      // Step 3 Upload metadata to the database
      await uploadMetadata(file.name, file.size, file.type, userId!, storagePath);

      setMessage(success ? 'File Upload Successful!' : 'File Upload Failed');
    } catch (error) {
      console.error(error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      setMessage('An error occured: ' + errorMessage);
    } finally {
      setUploading(false);
    }
  };

  return (
    <main className="flex flex-col items-center justify-center h-screen bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-3xl p-6 md:p-8 lg:p-10">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md">
          <div className="p-6 md:p-8 lg:p-10">
            <h1 className="text-2xl font-bold mb-4 dark:text-gray-200">Upload Image</h1>
            <form>
              <div className="flex justify-center items-center h-64 bg-gray-200 dark:bg-gray-700 rounded-lg mb-6">
                <label
                  className="cursor-pointer flex flex-col items-center justify-center space-y-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors"
                  htmlFor="image-upload"
                >
                  <UploadIcon className="w-8 h-8" />
                  <span>Drag and drop or click to upload</span>
                </label>
                <input
                  accept="image/*"
                  className="hidden"
                  id="image-upload"
                  type="file"
                  onChange={handleFileChange}
                />
              </div>

              {preview && (
                <div className="bg-white dark:bg-gray-800 shadow-md mt-4 mb-4">
                  <Image
                    src={preview}
                    alt="Uploaded Image"
                    width={600}
                    height={400}
                    className="w-full h-auto rounded-lg"
                  />
                </div>
              )}
              <p className="dark:text-gray-200">Upload with</p>
              <p className="text-sm dark:text-gray-500">select one</p>
              <div className="flex justify-end">
                <Button text="Submit" submitHandler={handlePreSignedUrlSubmit} />
              </div>
            </form>
            <div className="mt-2">
              <p className="text-gray-200 dark:text-gray-500">{message}</p>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}

function UploadIcon(props: IconProps) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="17 8 12 3 7 8" />
      <line x1="12" x2="12" y1="3" y2="15" />
    </svg>
  );
}
